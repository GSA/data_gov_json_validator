<?php
/**
 * User: ykhadilkar
 * Date: 11/20/13
 * Time: 11:34 AM
 */

use JsonSchema\Validator;
use JsonSchema\Uri\UriRetriever;

/**
 * Documentation
 * http://docs.ckan.org/en/latest/api.html#ckan.logic.action.get.package_search
 */
define('CKAN_URL', "http://catalog.data.gov/api/3/action/package_search");
/**
 *
 */
define('CKAN_REQUESTS_PER_SEARCH', 20);
/**
 *
 */
define('CKAN_RESULTS_PER_PAGE', 500);
/**
 *
 */
define('CKAN_API_RETRY_ON_ERROR', 3);

/**
 * @return array
 */
function data_gov_json_validator_menu()
{
    $items = array();

    $items['json-validator'] = array(
        'title'            => 'Data.gov JSON Validator',
        'page callback'    => 'data_gov_json_validator_validator_form',
        'access arguments' => array('access content'),
    );

    return $items;
}

/**
 *
 */
function data_gov_json_validator_validator_form()
{
    $schema_file_path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'data_gov_json_validator') . '/config/schema.json';
    $data_dir         = DRUPAL_ROOT . '/' . drupal_get_path('module', 'data_gov_json_validator') . '/data/';
    $results_dir      = DRUPAL_ROOT . '/' . drupal_get_path('module', 'data_gov_json_validator') . '/results/';
    define('RESULTS_LOG', $results_dir . 'processing');

    is_file(RESULTS_LOG) && unlink(RESULTS_LOG);

    foreach (glob($results_dir . '*.csv') as $dataset) {
        unlink($dataset);
    }

    foreach (glob($results_dir . '*.json') as $dataset) {
        unlink($dataset);
    }

    $datasets = glob($data_dir . '*.json');
    sort($datasets);

    foreach ($datasets as $dataset) {
        data_gov_json_validator($dataset, $schema_file_path, true);
    }
}

/**
 * @param $data_file_path
 * @param $schema_file_path
 * @param bool $search_enabled
 */
function data_gov_json_validator($data_file_path, $schema_file_path, $search_enabled = false)
{
    $basename = basename($data_file_path);
    error_log(str_pad($basename, 70, ' . '), 3, RESULTS_LOG);
    // Register the autoloader and ensure the library is available.
    composer_manager_register_autoloader();
    // Get the schema and data as objects
    $retriever = new UriRetriever;

    //get data
    $data_string = file_get_contents($data_file_path);
    $data_array  = json_decode($data_string);

    $success         = false;
    $json_file_error = 'Input JSON file could not be decoded: ';

    switch (json_last_error()) {
        case JSON_ERROR_NONE:
            $success = true;
            break;
        case JSON_ERROR_DEPTH:
            error_log($json_file_error . ' - Maximum stack depth exceeded' . PHP_EOL, 3, RESULTS_LOG);
            break;
        case JSON_ERROR_STATE_MISMATCH:
            error_log($json_file_error . ' - Underflow or the modes mismatch' . PHP_EOL, 3, RESULTS_LOG);
            break;
        case JSON_ERROR_CTRL_CHAR:
            error_log($json_file_error . ' - Unexpected control character found' . PHP_EOL, 3, RESULTS_LOG);
            break;
        case JSON_ERROR_SYNTAX:
            error_log($json_file_error . ' - Syntax error, malformed JSON' . PHP_EOL, 3, RESULTS_LOG);
            break;
        case JSON_ERROR_UTF8:
            error_log($json_file_error . ' - Malformed UTF-8 characters, possibly incorrectly encoded' . PHP_EOL, 3, RESULTS_LOG);
            break;
        default:
            error_log($json_file_error . ' - Unknown error' . PHP_EOL, 3, RESULTS_LOG);
            break;
    }

    if (!$success) {
        return;
    }

    if (!is_array($data_array)) {
        error_log('Input JSON is not an ARRAY - ' . PHP_EOL, 3, RESULTS_LOG);

        return;
    }

    //get schema
    $schema = $retriever->retrieve('file://' . $schema_file_path);

    // If you use $ref or if you are unsure, resolve those references here
    // This modifies the $schema object
    $refResolver = new JsonSchema\RefResolver($retriever);
    $refResolver->resolve($schema, 'file://' . __DIR__);
    $json_validation_results = array();

    $valid   = $invalid = 0;
    $counter = array();

    foreach ($data_array as $data) {
        $id = md5($data->identifier . $data->title);
        if (isset($counter[$id])) {
            echo PHP_EOL . "Duplicate found:" . PHP_EOL;
            echo '(' . $data->identifier . ')' . $data->title . PHP_EOL;
        }
        @$counter[$id]++;

        // Validate
        $validator = new JsonSchema\Validator();
        $validator->check($data, $schema);
        $json_validation_results[$id]["Title"]      = $data->title;
        $json_validation_results[$id]["identifier"] = $data->identifier;
        if ($validator->isValid()) {
            $json_validation_results[$id]['Valid'] = true;
            $valid++;
        } else {
            $invalid++;
            $json_validation_results[$id]['Valid'] = false;
            foreach ($validator->getErrors() as $error) {
                $json_validation_results[$id]['Errors'][] = $error;
            }
        }
    }

    $json_total_results = json_encode($json_validation_results, JSON_PRETTY_PRINT);
    $resultsFile        = str_replace('.json', '_results.json', $basename);
    file_put_contents(__DIR__ . '/results/' . $resultsFile, $json_total_results);
    echo str_pad($basename, 70, ' . ');

    $percent = ceil($valid / ($valid + $invalid) * 100);
    echo $out = '|' . str_pad("$percent% |", 7, ' ', STR_PAD_LEFT)
        . str_pad("$valid valid |", 13, ' ', STR_PAD_LEFT)
        . str_pad("$invalid invalid |", 15, ' ', STR_PAD_LEFT) . PHP_EOL;

    error_log($out, 3, RESULTS_LOG);
//    print_r($json_total_results);

    //search CKAN.
    if ($search_enabled) {
        data_gov_json_validator_csv_report($data_array, $json_validation_results, $basename);
    }
}

/**
 * @param $data_array
 * @param $json_validation_results
 * @param $basename
 */
function data_gov_json_validator_csv_report($data_array, $json_validation_results, $basename)
{
    $resultsFile = str_replace('.json', '_results.csv', $basename);
    $fp          = fopen(__DIR__ . '/results/' . $resultsFile, 'w');

    $csv_header = array(
        'Dataset Title in JSON',
        'Access URL in JSON',
        'Valid to POD Schema',
        'Number of Errors',
        'Number of Matches in catalog.data.gov',
        'Access URL match flag',
        'Is Geospatial',
        'Categories',
        'catalog.data.gov URLs for matches found',
    );

    fputcsv($fp, $csv_header);

    /**
     * Split json datas to sets of CKAN_REQUESTS_PER_SEARCH , for speed-up script running by
     * reducing count CKAN request, grouping them together
     */
    $data_chunks = array_chunk($data_array, CKAN_REQUESTS_PER_SEARCH);

    foreach ($data_chunks as $data_chunk) {
//        prepare solr search request
        $titles = $original_titles = array();
        foreach ($data_chunk as $data) {
            $original_titles[] = $data->title;
            $titles[]          = '(' . escapeSolrValue($data->title) . ')';
        }

        $titles = array_unique($titles);

        $title = '(' . join(' OR ', $titles) . ')';

//        workaround
        if ('((National Bridge Inventory))' == $title) {
            $title = '(National Bridge Inventory -2005 -2006 -2007 -2008 -2009 -2010 -2011 -2012 -2013 -2014 -2015 -2016)';
        }

        $csv_result_urls                     = array();
        $csv_result_urls_access_url_no_match = array();
        $csv_is_geospatial                   = array();
        $csv_categories = array();
        $csv_access_url_match                = array();
        $csv_number_of_matches               = array();
        $csv_no_match                        = array();

        /**
         * Preparing csv results containers
         */
        foreach ($data_chunk as $index => $data) {
            $csv_result_urls[$index]                     = '';
            $csv_result_urls_access_url_no_match[$index] = '';
            $csv_is_geospatial[$index]                   = 'na';
            $csv_categories[$index] = 'na';
            $csv_access_url_match[$index]                = 'no';
            $csv_number_of_matches[$index]               = 0;
            $csv_no_match[$index]                        = array();
        }

        $start_from = 0;
        /**
         * Check CKAN for existing records
         */
        while ($base_output = data_gov_json_validator_search_solr($title, CKAN_RESULTS_PER_PAGE, $start_from)) {
            if ($start_from > CKAN_RESULTS_PER_PAGE * 2) {
                echo PHP_EOL . 'Multi page search start from ' . $start_from . ' for request:' . PHP_EOL . $title . PHP_EOL . PHP_EOL;
            }

            $start_from += CKAN_RESULTS_PER_PAGE;

            //convert to an array
            $base_output_array = json_decode($base_output, true);

            if (!isset($base_output_array['result'])) {
                break;
//            error_log('No results  for these titles:'.PHP_EOL, 3, RESULTS_LOG);
//            error_log(join(PHP_EOL, $original_titles).PHP_EOL, 3, RESULTS_LOG);
//            error_log($base_output.PHP_EOL, 3, RESULTS_LOG);
//            } elseif ($base_output_array['result']['count'] > $sz = sizeof($base_output_array['result']['results'])) {
            } elseif ($base_output_array['result']['count'] > 2000) {
//                error_log("Too many results (".$base_output_array['result']['count'].
//                    ") with one of these titles:".PHP_EOL, 3, RESULTS_LOG);
//                error_log(join(PHP_EOL, $original_titles).PHP_EOL, 3, RESULTS_LOG);
            }

            $sz = sizeof($base_output_array['result']['results']);

            foreach ($data_chunk as $index => $data) {
                if (
                    isset($base_output_array['result']) &&
                    is_array($base_output_array['result']) &&
                    is_array($base_output_array['result']['results'])
                ) {

                    //number of results
                    $number_of_results = sizeof($base_output_array['result']['results']);

                    //If one or more matches found then try to match access URL
                    if ($number_of_results) {
                        foreach ($base_output_array['result']['results'] as $ckan_result) {
                            if (trim($data->title) !== trim($ckan_result['title'])) {
//                            if the CKAN has another title, we skip it
                                continue;
                            }
                            $csv_number_of_matches[$index]++;

                            if (isset($ckan_result['extras'])) {
                                foreach ($ckan_result['extras'] as $extra) {
                                    if ('metadata_type' == $extra['key'] && 'geospatial' == $extra['value']) {
                                        $csv_is_geospatial[$index] = 'true';
                                    }
                                }
                            }

                            if (is_array($ckan_result['resources'])) {
                                foreach ($ckan_result['resources'] as $ckan_resource) {
                                    $resourceUrl = trim($ckan_resource['url']);

//                                checking whether JSON resource accessURL equals CKAN resource url
                                    if (isset($data->accessURL) && $resourceUrl === trim($data->accessURL)) {
                                        $csv_result_urls[$index]      = "http://catalog.data.gov/dataset/" . $ckan_result['name'];
                                        $csv_access_url_match[$index] = 'yes';
                                        break 1;
                                    }

//                                at this point, we start comparing CKAN resource URL with our
//                                JSON resource distribution urls
                                    if (isset($data->distribution) && is_array($data->distribution)) {
                                        foreach ($data->distribution as $distribution) {
                                            if (isset($distribution->accessURL) && $resourceUrl == trim($distribution->accessURL)) {
                                                $csv_result_urls[$index]      = "http://catalog.data.gov/dataset/" . $ckan_result['name'];
                                                $csv_access_url_match[$index] = 'yes';
                                                break 2;
                                            }
                                        } // foreach distribution
                                    }
                                } // foreach resource

                                $csv_no_match[$index][] = 'http://catalog.data.gov/dataset/' . $ckan_result['name'];
                            }
                        }
                    }
                }
            }

            if (($start_from > $base_output_array['result']['count']) || ($sz < CKAN_RESULTS_PER_PAGE)) {
                break;
            }
        }

        /**
         * Writing CSV results for current data set
         */
        foreach ($data_chunk as $index => $data) {
            $url_match  = ('yes' == $csv_access_url_match[$index]);

            if ('na' == $csv_is_geospatial[$index] && $csv_number_of_matches[$index] && $url_match) {
                $csv_is_geospatial[$index] = 'false';
            }

            if ($csv_result_urls[$index]) {
                $csv_categories[$index] = ckan_extract_category_tags($csv_result_urls[$index]);
            }

            if (sizeof($csv_no_match[$index])) {
                $csv_result_urls_access_url_no_match[$index] = join(' | ', $csv_no_match[$index]);
            }

            $csv_line        = array();
            $csv_line[]      = $data->title;
            $distributionUrl = (isset($data->distribution) && is_array($data->distribution)
                && isset($data->distribution[0]->accessURL)) ? $data->distribution[0]->accessURL : false;
            $csv_line[]      = isset($data->accessURL) ? $data->accessURL : ($distributionUrl ? : '');

            $id = md5($data->identifier . $data->title);

            $csv_line[] = $json_validation_results[$id]['Valid'] ? 'true' : 'false';

            if (isset($json_validation_results[$id]['Errors']) && is_array($ers = $json_validation_results[$id]['Errors'])) {
                $csv_line[] = sizeof($ers);
            } else {
                $csv_line[] = 0;
            }

            $csv_line[] = $csv_number_of_matches[$index];
            $csv_line[] = $csv_access_url_match[$index];
            $csv_line[] = $csv_is_geospatial[$index];
            $csv_line[] = $csv_categories[$index];
            $csv_line[] = $csv_result_urls[$index] ? : $csv_result_urls_access_url_no_match[$index];

            fputcsv($fp, $csv_line);
        }
    }

    fclose($fp);
}

/**
 * @param $dataset_url
 * @return array|string
 */
function ckan_extract_category_tags($dataset_url)
{
    $dataset_url = str_replace('/dataset/', '/api/rest/dataset/', $dataset_url);
    if (false === $dataset = curl_get_resource($dataset_url)) {
        return 'na';
    }

    $dataset = json_decode($dataset, true);
    if (!isset($dataset['groups']) || !is_array($dataset['groups']) || !sizeof($groups = $dataset['groups'])) {
        return 'na';
    }

    if (!isset($dataset['extras']) || !is_array($dataset['extras']) || !sizeof($extras = $dataset['extras'])) {
        return 'na';
    }

    $return = array();

    foreach ($groups as $group) {
//        get available [extras]
//        __category_tag_3b4e71c5-3c3c-43af-a3ff-81694225e453
        if (false === $category_id = ckan_get_category_id($group)) {
            $return[$group] = 'na';
            continue;
        }
        $tag_key = '__category_tag_' . $category_id;
        if (isset($extras[$tag_key])) {
            $return[$group] = json_decode($extras[$tag_key]);
        } else {
            $return[$group] = '';
        }
    }
    $return = json_encode($return);

    return $return;
}

/**
 * @param $title
 * @param int $rows
 * @param int $start
 * @return mixed
 */
function data_gov_json_validator_search_solr($title, $rows = 100, $start = 0)
{
    //search in catalog
    //initialize curl and set base options
    $ch = curl_init(CKAN_URL);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_HEADER, "Content-Type: application/json;charset=utf-8");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

    $solr_request = array(
        'fq'    => 'title:' . $title,
        'rows'  => $rows,
        'start' => $start,
    );
    $query        = json_encode($solr_request);

//    echo $query.'<br />'.PHP_EOL;
//    die($query);

    curl_setopt($ch, CURLOPT_POSTFIELDS, $query);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0);

    $retry = $curl_output = 0;

    while (++$retry <= CKAN_API_RETRY_ON_ERROR) {
//        execute CURL request
        $curl_output = curl_exec($ch);

        $error = curl_error($ch);

//        return result if no error found
        if ('' == $error) {
            break;
        }
    }

    if (isset($error) && '' !== $error) {
        $result['curl_error'] = $error;
        echo "curl error with request " . CKAN_URL . " with request " . $query . " <br />" . PHP_EOL;
        var_dump($result);
    }

    curl_close($ch);

    return $curl_output ? : false;
}

/**
 * @param $category_name
 * @return bool
 */
function ckan_get_category_id($category_name)
{
    static $groups_set = array();

    if (isset($groups_set[$category_name])) {
        return $groups_set[$category_name];
    }

    $url = 'http://catalog.data.gov/api/rest/group/' . $category_name;

    if (false === $category = curl_get_resource($url)) {
        return false;
    }

    $category = json_decode($category, true);
    if (!isset($category['id'])) {
        return false;
    }
    $groups_set[$category_name] = $category['id'];

    return $category['id'];
}

/**
 * @param $url
 * @return bool
 */
function curl_get_resource($url)
{
    //initialize curl and set base options
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_HEADER, "Content-Type: application/json;charset=utf-8");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0);

    $retry = $curl_output = 0;

    while (++$retry <= CKAN_API_RETRY_ON_ERROR) {
        $curl_output = curl_exec($ch);

        $error = curl_error($ch);

        if ('' == $error) {
            break;
        }
    }

    if (isset($error) && '' !== $error) {
        $result['curl_error'] = $error;
        echo "curl error with request " . $url . " <br />" . PHP_EOL;
        var_dump($result);
    }

    curl_close($ch);

    return $curl_output ? : false;
}

/**
 * @param $string
 * @return mixed
 */
function escapeSolrValue($string)
{
    $match = array('\\', '+', '-', '&', '|', '!', '(', ')', '{', '}', '[', ']', '^', '~', '*', '?', ':', '"', ';');
//    $replace = array('\\\\', '\\+', '\\-', '\\&', '\\|', '\\!', '\\(', '\\)', '\\{', '\\}', '\\[', '\\]', '\\^', '\\~', '\\*', '\\?', '\\:', '\\"', '\\;');
    $replace = array(' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ');
    $string  = str_replace($match, $replace, $string);

    return $string;
}