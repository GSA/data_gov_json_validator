<?php
/**
 * User: ykhadilkar
 * Date: 11/20/13
 * Time: 11:34 AM
 */

use JsonSchema\Validator;
use JsonSchema\RefResolver;
use JsonSchema\Uri\UriRetriever;

/**
 *
 */
define('CKAN_URL', "http://catalog.data.gov/api/3/action/package_search");

/**
 * @return array
 */
function data_gov_json_validator_menu(){
    $items = array();

    $items['json-validator'] = array(
        'title' => 'Data.gov JSON Validator',
        'page callback' => 'data_gov_json_validator_validator_form',
        'access arguments' => array('access content'),
    );

    return $items;
}

/**
 *
 */
function data_gov_json_validator_validator_form(){
    $data_file_path = DRUPAL_ROOT.'/'.drupal_get_path('module', 'data_gov_json_validator').'/data/department_of_treasury.json';
    $schema_file_path = DRUPAL_ROOT.'/'.drupal_get_path('module', 'data_gov_json_validator').'/schema/schema_1_0_final.json';
    data_gov_json_validator($data_file_path, $schema_file_path);
}

/**
 * @param $data_file_path
 * @param $schema_file_path
 */
function data_gov_json_validator($data_file_path,$schema_file_path){
    $basename = basename($data_file_path);
    echo 'Processing '.$basename.' ... ';
    // Register the autoloader and ensure the library is available.
    composer_manager_register_autoloader();
    // Get the schema and data as objects
    $retriever = new UriRetriever;

    //get data
    $data_string = file_get_contents($data_file_path);
    $data_array = json_decode($data_string);

    $success = false;
    $json_file_error = 'Input JSON file could not be decoded: ';
    switch (json_last_error()) {
        case JSON_ERROR_NONE:
            $success = true;
//            echo ' - No errors';
            break;
        case JSON_ERROR_DEPTH:
            echo $json_file_error.' - Maximum stack depth exceeded';
            break;
        case JSON_ERROR_STATE_MISMATCH:
            echo $json_file_error.' - Underflow or the modes mismatch';
            break;
        case JSON_ERROR_CTRL_CHAR:
            echo $json_file_error.' - Unexpected control character found';
            break;
        case JSON_ERROR_SYNTAX:
            echo $json_file_error.' - Syntax error, malformed JSON';
            break;
        case JSON_ERROR_UTF8:
            echo $json_file_error.' - Malformed UTF-8 characters, possibly incorrectly encoded';
            break;
        default:
            echo $json_file_error.' - Unknown error';
            break;
    }

    if (!$success) {
        return;
    }

    //get schema
    $schema = $retriever->retrieve('file://' . $schema_file_path);

    // If you use $ref or if you are unsure, resolve those references here
    // This modifies the $schema object
    $refResolver = new JsonSchema\RefResolver($retriever);
    $refResolver->resolve($schema, 'file://' . __DIR__);
    $total_results = array();

    foreach($data_array as $data) {
        // Validate
        $validator = new JsonSchema\Validator();
        $validator->check($data, $schema);
        $total_results[$data->identifier]["Title"] = $data->title;
        if ($validator->isValid()) {
            $total_results[$data->identifier]['Valid'] = True;
        } else {
            $total_results[$data->identifier]['Valid'] = False;
            foreach ($validator->getErrors() as $error) {
                $total_results[$data->identifier]['Errors'][] = $error;
            }
        }
    }
    $json_total_results = json_encode($total_results, JSON_PRETTY_PRINT);
    $resultsFile = str_replace('.json', '_results_.json', $basename);
    file_put_contents(__DIR__ . '/results/'.$resultsFile, $json_total_results);
    echo 'DONE   <br />'.PHP_EOL;
//    print_r($json_total_results);

    //search CKAN.
    //TODO: Optimize search. Use only one for loop for validation as well as search may be.
//    data_gov_json_validator_csv_report($data_array,$total_results);
}

/**
 * @param $data_array
 * @param $total_results
 */
function data_gov_json_validator_csv_report($data_array,$total_results){

    $fp = fopen(__DIR__.'/results/csv_results.csv', 'w');

    $csv_header = array(
        'Dataset Title in JSON',
        'Access URL in JSON',
        'Valid to POD Schema',
        'Number of Errors',
        'Number of Matches in catalog.data.gov',
        'Access URL match flag',
        'Is Geospatial',
        'catalog.data.gov URLs for matches found',
    );

    fputcsv($fp, $csv_header);

    foreach($data_array as $data) {

        //search for title
        $base_output = data_gov_json_validator_search_solr($data->title);

        //convert to an array
        $base_output_array = json_decode($base_output,true);

        $result_urls = "";
        $result_urls_access_url_no_match = "";
        $is_geospatial = "na";
        $access_url_match = "no";
        $number_of_results ="na";

        if(is_array($base_output_array['result']) && is_array($base_output_array['result']['results'])){

            //number of results
            $number_of_results = sizeof($base_output_array['result']['results']);

            //If one or more matches found then try to match access URL
            if ($number_of_results){
                $no_match = array();
                foreach($base_output_array['result']['results'] as $ckan_result){
                    if(trim($ckan_result['resources'][0]['url']) === trim($data->accessURL)){
                        $result_urls .= "http://catalog.data.gov/dataset/".$ckan_result['name'];
                        $access_url_match = 'yes';
                        $is_geospatial = 'false';
                        if (isset($ckan_result['extras'])) {
                            foreach ($ckan_result['extras'] as $extra) {
                                if ('metadata_type' == $extra['key'] && 'geospatial' == $extra['value']) {
                                    $is_geospatial = 'true';
                                }
                            }
                        }
                        break;
                    }else{
                        $no_match[] = 'http://catalog.data.gov/dataset/'.$ckan_result['name'];
                    }
                }
                $result_urls_access_url_no_match = join(' | ', $no_match);
            }
        }

        $csv_line = array();
        $csv_line[] = $data->title;
        $csv_line[] = $data->accessURL;
        $csv_line[] = $total_results[$data->identifier]['Valid'] ? 'true' : 'false';

        if (is_array($ers = $total_results[$data->identifier]['Errors'])) {
            $csv_line[] = sizeof($ers);
        } else {
            $csv_line[] = 0;
        }

        $csv_line[] = $number_of_results;
        $csv_line[] = $access_url_match;
        $csv_line[] = $is_geospatial;
        $csv_line[] = $result_urls ?: $result_urls_access_url_no_match;

        fputcsv($fp, $csv_line);
    }

    fclose($fp);
}

/**
 * @param $title
 * @return mixed
 */
function data_gov_json_validator_search_solr($title){
    //search in catalog
    //initialize curl and set base options
    $ch = curl_init(CKAN_URL);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_HEADER, "Content-Type: application/json");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $solr_query = "title:".$title;
    $query = '{"fq":"'.$solr_query.'"}';
    curl_setopt($ch, CURLOPT_POSTFIELDS, $query);
    $curl_output = curl_exec($ch);
    curl_close($ch);
    return $curl_output;
}